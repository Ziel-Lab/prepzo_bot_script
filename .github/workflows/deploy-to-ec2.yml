name: Deploy to EC2 with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN }}
          aws-region: eu-north-1

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Update version information
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          # Update version.py with the git commit
          sed -i "s/GIT_COMMIT = \"unknown\"/GIT_COMMIT = \"$GIT_COMMIT\"/" version.py
          sed -i "s/BUILD_DATE = \".*\"/BUILD_DATE = \"$BUILD_DATE\"/" version.py
          
          echo "Version info updated with commit $GIT_COMMIT and build date $BUILD_DATE"

      - name: Store secrets in AWS Parameter Store
        run: |
          # Store all secrets in AWS Parameter Store
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_URL" --value "${{ secrets.SUPABASE_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_URL"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --value "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_SERVICE_ROLE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/OPENAI_API_KEY" --value "${{ secrets.OPENAI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store OPENAI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --value "${{ secrets.DEEPGRAM_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store DEEPGRAM_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_URL" --value "${{ secrets.LIVEKIT_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_URL"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --value "${{ secrets.LIVEKIT_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --value "${{ secrets.CARTESIA_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store CARTESIA_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --value "${{ secrets.ELEVENLABS_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store ELEVENLABS_API_KEY"
          
          echo "Secrets stored in AWS Parameter Store"

      - name: Create deployment package
        run: |
          # Run the deployment script to create the package
          bash scripts/deploy.sh --force
          
          # The script creates prepzo-bot-deployment.zip in the current directory

      - name: Bootstrap CDK (if needed)
        run: |
          # Check if CDK is bootstrapped
          CDK_BOOTSTRAPPED=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query "StackSummaries[?StackName=='CDKToolkit'].StackName" --output text)
          
          if [ -z "$CDK_BOOTSTRAPPED" ]; then
            echo "CDK not bootstrapped. Bootstrapping now..."
            npm install -g aws-cdk
            cdk bootstrap aws://$(aws sts get-caller-identity --query "Account" --output text)/eu-north-1
          else
            echo "CDK already bootstrapped"
          fi

      - name: Create S3 bucket for deployment artifacts
        run: |
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-')"
          
          # Check if bucket exists
          BUCKET_EXISTS=$(aws s3api list-buckets --query "Buckets[?Name=='${BUCKET_NAME}'].Name" --output text)
          
          if [ -z "$BUCKET_EXISTS" ]; then
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3api create-bucket --bucket ${BUCKET_NAME} --create-bucket-configuration LocationConstraint=eu-north-1
            aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket ${BUCKET_NAME} already exists"
          fi

      - name: Create CodeDeploy application and deployment group
        run: |
          APP_NAME="PrepzoBotApplication"
          DEPLOY_GROUP="PrepzoBotDeploymentGroup"
          
          # Create application if it doesn't exist
          APP_EXISTS=$(aws deploy list-applications --query "applications[?contains(@,'${APP_NAME}')]" --output text || echo "")
          
          if [ -z "$APP_EXISTS" ]; then
            echo "Creating CodeDeploy application: ${APP_NAME}"
            aws deploy create-application --application-name ${APP_NAME}
          else
            echo "CodeDeploy application ${APP_NAME} already exists"
          fi
          
          # Check if deployment group exists
          DEPLOY_GROUP_EXISTS=$(aws deploy list-deployment-groups --application-name ${APP_NAME} --query "deploymentGroups[?contains(@,'${DEPLOY_GROUP}')]" --output text 2>/dev/null || echo "")
          
          if [ -z "$DEPLOY_GROUP_EXISTS" ]; then
            # Create service role for CodeDeploy if it doesn't exist
            ROLE_ARN=$(aws iam list-roles --query "Roles[?RoleName=='CodeDeployServiceRole'].Arn" --output text)
            
            if [ -z "$ROLE_ARN" ]; then
              echo "Creating CodeDeploy service role"
              TRUST_POLICY='{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "codedeploy.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              }'
              
              aws iam create-role --role-name CodeDeployServiceRole --assume-role-policy-document "$TRUST_POLICY"
              aws iam attach-role-policy --role-name CodeDeployServiceRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
              
              ROLE_ARN=$(aws iam get-role --role-name CodeDeployServiceRole --query "Role.Arn" --output text)
            fi
            
            # Get the EC2 instance ID with the tag "Name" containing "PrepzoBot"
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*PrepzoBot*" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].InstanceId" --output text)
            
            if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
              echo "No running instance found. Deploying using CDK first..."
              # Install CDK dependencies and deploy the infrastructure
              npm install
              npx cdk deploy --require-approval never
              
              # Get the instance ID after deployment
              INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=*PrepzoBot*" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].InstanceId" --output text)
              
              if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
                echo "Failed to find EC2 instance even after CDK deployment"
                exit 1
              fi
            fi
            
            echo "Creating CodeDeploy deployment group with instance $INSTANCE_ID"
            
            # Create the deployment group
            aws deploy create-deployment-group \
              --application-name ${APP_NAME} \
              --deployment-group-name ${DEPLOY_GROUP} \
              --deployment-config-name CodeDeployDefault.AllAtOnce \
              --ec2-tag-filters Key=Name,Value=*PrepzoBot*,Type=KEY_AND_VALUE \
              --service-role-arn ${ROLE_ARN}
              
            echo "CodeDeploy deployment group created"
          else
            echo "CodeDeploy deployment group ${DEPLOY_GROUP} already exists"
          fi

      - name: Upload deployment package to S3
        run: |
          GIT_COMMIT=$(git rev-parse HEAD)
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-')"
          S3_LOCATION="s3://${BUCKET_NAME}/${GIT_COMMIT}.zip"
          
          echo "Uploading deployment package to ${S3_LOCATION}..."
          aws s3 cp prepzo-bot-deployment.zip ${S3_LOCATION}

      - name: Deploy with CodeDeploy
        run: |
          GIT_COMMIT=$(git rev-parse HEAD)
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-')"
          
          echo "Creating deployment with CodeDeploy..."
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name PrepzoBotApplication \
            --deployment-group-name PrepzoBotDeploymentGroup \
            --s3-location bucket=${BUCKET_NAME},bundleType=zip,key=${GIT_COMMIT}.zip \
            --file-exists-behavior OVERWRITE \
            --query "deploymentId" --output text)
          
          echo "Deployment started with ID: ${DEPLOYMENT_ID}"
          
          # Monitor deployment status
          echo "Monitoring deployment status..."
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Checking deployment status (attempt $i of $MAX_RETRIES)..."
            DEPLOYMENT_STATUS=$(aws deploy get-deployment --deployment-id ${DEPLOYMENT_ID} --query "deploymentInfo.status" --output text)
            
            echo "Current status: ${DEPLOYMENT_STATUS}"
            
            if [ "$DEPLOYMENT_STATUS" == "Succeeded" ]; then
              echo "✅ Deployment successful!"
              break
            elif [ "$DEPLOYMENT_STATUS" == "Failed" ] || [ "$DEPLOYMENT_STATUS" == "Stopped" ]; then
              echo "❌ Deployment failed or was stopped"
              aws deploy get-deployment --deployment-id ${DEPLOYMENT_ID}
              exit 1
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Deployment is still in progress. The GitHub Action will complete, but deployment may still be ongoing."
              break
            fi
            
            sleep ${RETRY_INTERVAL}
          done

      - name: Verify deployment
        run: |
          # Get instance IP
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=*PrepzoBot*" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" == "None" ]; then
            echo "Error: Could not find instance IP"
            exit 1
          fi
          
          echo "Instance IP: $INSTANCE_IP"
          
          # Run the deployment check script
          python scripts/check_deployment.py --ip $INSTANCE_IP --app PrepzoBotApplication --group PrepzoBotDeploymentGroup 