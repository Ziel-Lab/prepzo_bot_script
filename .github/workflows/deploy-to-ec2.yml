name: Deploy to EC2

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Create CDK infrastructure directory
        run: mkdir -p infrastructure
      
      - name: Initialize CDK project
        working-directory: ./infrastructure
        run: |
          npm install -g aws-cdk
          cdk init app --language typescript
          
          # Debug CDK initialization
          echo "Created CDK project structure:"
          ls -la
          
          # Check default app.ts file
          echo "Default app.ts content:"
          cat lib/infrastructure-stack.ts || echo "File not found"
      
      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: |
          npm install aws-cdk-lib constructs
          npm install @aws-cdk/aws-ec2 @aws-cdk/aws-iam
      
      - name: Create CDK stack
        working-directory: ./infrastructure
        run: |
          # Check what files were created by CDK init
          echo "Files created by CDK init:"
          find . -type f | grep -v "node_modules"
          
          # Find the default stack name
          DEFAULT_STACK_NAME=$(grep -r "class" --include="*.ts" lib/ | head -1 | awk -F 'class ' '{print $2}' | awk -F ' ' '{print $1}' || echo "UnknownStack")
          echo "Default stack name detected: $DEFAULT_STACK_NAME"
          
          # Create stack file using echo commands instead of heredoc
          echo 'import * as cdk from "aws-cdk-lib";' > lib/prepzo-bot-stack.ts
          echo 'import { Construct } from "constructs";' >> lib/prepzo-bot-stack.ts
          echo 'import * as ec2 from "aws-cdk-lib/aws-ec2";' >> lib/prepzo-bot-stack.ts
          echo 'import * as iam from "aws-cdk-lib/aws-iam";' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo 'export class PrepzoBotStack extends cdk.Stack {' >> lib/prepzo-bot-stack.ts
          echo '  constructor(scope: Construct, id: string, props?: cdk.StackProps) {' >> lib/prepzo-bot-stack.ts
          echo '    super(scope, id, props);' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Create a VPC' >> lib/prepzo-bot-stack.ts
          echo '    const vpc = new ec2.Vpc(this, "PrepzoBotVPC", {' >> lib/prepzo-bot-stack.ts
          echo '      maxAzs: 2,' >> lib/prepzo-bot-stack.ts
          echo '      natGateways: 0,' >> lib/prepzo-bot-stack.ts
          echo '      subnetConfiguration: [' >> lib/prepzo-bot-stack.ts
          echo '        {' >> lib/prepzo-bot-stack.ts
          echo '          name: "public",' >> lib/prepzo-bot-stack.ts
          echo '          subnetType: ec2.SubnetType.PUBLIC,' >> lib/prepzo-bot-stack.ts
          echo '        }' >> lib/prepzo-bot-stack.ts
          echo '      ],' >> lib/prepzo-bot-stack.ts
          echo '    });' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Security group' >> lib/prepzo-bot-stack.ts
          echo '    const securityGroup = new ec2.SecurityGroup(this, "PrepzoBotSecurityGroup", {' >> lib/prepzo-bot-stack.ts
          echo '      vpc,' >> lib/prepzo-bot-stack.ts
          echo '      description: "Allow SSH and HTTP(S) access",' >> lib/prepzo-bot-stack.ts
          echo '      allowAllOutbound: true,' >> lib/prepzo-bot-stack.ts
          echo '    });' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Add inbound rules - explicitly allow all ports needed' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), "Allow SSH access from anywhere");' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), "Allow HTTP access from anywhere");' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(443), "Allow HTTPS access from anywhere");' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(3000), "Allow access on port 3000");' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8080), "Allow access to health check endpoint");' >> lib/prepzo-bot-stack.ts
          echo '    securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTraffic(), "Allow all traffic during testing");' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Create a role for the EC2 instance' >> lib/prepzo-bot-stack.ts
          echo '    const role = new iam.Role(this, "PrepzoBotRole", {' >> lib/prepzo-bot-stack.ts
          echo '      assumedBy: new iam.ServicePrincipal("ec2.amazonaws.com"),' >> lib/prepzo-bot-stack.ts
          echo '    });' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Add managed policies to the role' >> lib/prepzo-bot-stack.ts
          echo '    role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"));' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // User data script for EC2 instance' >> lib/prepzo-bot-stack.ts
          echo '    const userData = ec2.UserData.forLinux();' >> lib/prepzo-bot-stack.ts
          echo '    userData.addCommands(' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/bash",' >> lib/prepzo-bot-stack.ts
          echo '      "set -ex",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# IMMEDIATE PORT 80 LISTENER - starts before anything else",' >> lib/prepzo-bot-stack.ts
          echo '      "yum update -y && yum install -y nc",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create a simple TCP listener on port 80",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /tmp/port80listener.sh << '\''EOF'\''",' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/bash",' >> lib/prepzo-bot-stack.ts
          echo '      "while true; do",' >> lib/prepzo-bot-stack.ts
          echo '      "  echo -e \"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\n\\r\\n{\\\"status\\\":\\\"ok\\\"}\" | nc -l 80",' >> lib/prepzo-bot-stack.ts
          echo '      "  echo \$(date) - \"Port 80 request served\" >> /tmp/health-check.log",' >> lib/prepzo-bot-stack.ts
          echo '      "done",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "chmod +x /tmp/port80listener.sh",' >> lib/prepzo-bot-stack.ts
          echo '      "nohup /tmp/port80listener.sh > /tmp/port80.log 2>&1 &",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \$(date) - \"Started port 80 listener\" >> /tmp/health-check.log",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Open all ports in local iptables immediately",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables -P INPUT ACCEPT",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables -F",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Update system and install dependencies",' >> lib/prepzo-bot-stack.ts
          echo '      "yum update -y",' >> lib/prepzo-bot-stack.ts
          echo '      "yum install -y git python3 python3-pip python3-venv jq htop tcpdump nc",' >> lib/prepzo-bot-stack.ts
          echo '      "cd /home/ec2-user",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Setup simple backup health check using netcat",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /home/ec2-user/simple_health.sh << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/bash",' >> lib/prepzo-bot-stack.ts
          echo '      "while true; do",' >> lib/prepzo-bot-stack.ts
          echo '      "  echo -e \\"HTTP/1.1 200 OK\\nContent-Type: application/json\\n\\n{\\\\\\"status\\\\\\":\\\\\\"ok\\\\\\"}\\" | nc -l -p 8080",' >> lib/prepzo-bot-stack.ts
          echo '      "  sleep 0.1",' >> lib/prepzo-bot-stack.ts
          echo '      "done",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "chmod +x /home/ec2-user/simple_health.sh",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create systemd service for backup health check",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /etc/systemd/system/simple-health.service << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "[Unit]",' >> lib/prepzo-bot-stack.ts
          echo '      "Description=Simple Health Check Service",' >> lib/prepzo-bot-stack.ts
          echo '      "After=network.target",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "[Service]",' >> lib/prepzo-bot-stack.ts
          echo '      "User=ec2-user",' >> lib/prepzo-bot-stack.ts
          echo '      "ExecStart=/home/ec2-user/simple_health.sh",' >> lib/prepzo-bot-stack.ts
          echo '      "Restart=always",' >> lib/prepzo-bot-stack.ts
          echo '      "RestartSec=10",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "[Install]",' >> lib/prepzo-bot-stack.ts
          echo '      "WantedBy=multi-user.target",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl enable simple-health",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl start simple-health",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Clone the repository",' >> lib/prepzo-bot-stack.ts
          echo '      "git clone https://github.com/${{ github.repository }}.git prepzo_bot",' >> lib/prepzo-bot-stack.ts
          echo '      "chown -R ec2-user:ec2-user prepzo_bot",' >> lib/prepzo-bot-stack.ts
          echo '      "cd prepzo_bot",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Setup Python environment",' >> lib/prepzo-bot-stack.ts
          echo '      "python3 -m venv venv",' >> lib/prepzo-bot-stack.ts
          echo '      "source venv/bin/activate",' >> lib/prepzo-bot-stack.ts
          echo '      "pip install --upgrade pip",' >> lib/prepzo-bot-stack.ts
          echo '      "pip install -r requirements.txt",' >> lib/prepzo-bot-stack.ts
          echo '      "pip install requests paramiko flask",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create environment variables",' >> lib/prepzo-bot-stack.ts
          echo '      "mkdir -p /home/ec2-user/.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"SUPABASE_URL=${{ secrets.SUPABASE_URL }}\\" > /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"DEEPGRAM_API_KEY=${{ secrets.DEEPGRAM_API_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"LIVEKIT_URL=${{ secrets.LIVEKIT_URL }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"CARTESIA_API_KEY=${{ secrets.CARTESIA_API_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"ELEVENLABS_API_KEY=${{ secrets.ELEVENLABS_API_KEY }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"HEALTH_CHECK_PORT=8080\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"ENVIRONMENT=production\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"GIT_COMMIT=${{ github.sha }}\\" >> /home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create a simple health check server script if it doesnt exist in main.py",' >> lib/prepzo-bot-stack.ts
          echo '      "if ! grep -q \\"health\\" main.py; then",' >> lib/prepzo-bot-stack.ts
          echo '      "  cat > health_server.py << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "import os",' >> lib/prepzo-bot-stack.ts
          echo '      "import json",' >> lib/prepzo-bot-stack.ts
          echo '      "from flask import Flask",' >> lib/prepzo-bot-stack.ts
          echo '      "app = Flask(__name__)",' >> lib/prepzo-bot-stack.ts
          echo '      "@app.route(\\"/health\\")",' >> lib/prepzo-bot-stack.ts
          echo '      "def health():",' >> lib/prepzo-bot-stack.ts
          echo '      "    return json.dumps({\\"\\"status\\"\\":\\"\\"ok\\"\\"})}",' >> lib/prepzo-bot-stack.ts
          echo '      "if __name__ == \\"__main__\\":",' >> lib/prepzo-bot-stack.ts
          echo '      "    port = int(os.environ.get(\\"HEALTH_CHECK_PORT\\", 8080))",' >> lib/prepzo-bot-stack.ts
          echo '      "    app.run(host=\\"0.0.0.0\\", port=port)",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "  chmod +x health_server.py",' >> lib/prepzo-bot-stack.ts
          echo '      "  # Create a systemd service for the health check",' >> lib/prepzo-bot-stack.ts
          echo '      "  cat > /etc/systemd/system/health-check.service << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "[Unit]",' >> lib/prepzo-bot-stack.ts
          echo '      "Description=Health Check Service",' >> lib/prepzo-bot-stack.ts
          echo '      "After=network.target",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "[Service]",' >> lib/prepzo-bot-stack.ts
          echo '      "User=ec2-user",' >> lib/prepzo-bot-stack.ts
          echo '      "WorkingDirectory=/home/ec2-user/prepzo_bot",' >> lib/prepzo-bot-stack.ts
          echo '      "EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python health_server.py",' >> lib/prepzo-bot-stack.ts
          echo '      "Restart=always",' >> lib/prepzo-bot-stack.ts
          echo '      "RestartSec=10",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "[Install]",' >> lib/prepzo-bot-stack.ts
          echo '      "WantedBy=multi-user.target",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "  systemctl enable health-check",' >> lib/prepzo-bot-stack.ts
          echo '      "  systemctl start health-check",' >> lib/prepzo-bot-stack.ts
          echo '      "fi",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create systemd service for the main application",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /etc/systemd/system/prepzo-bot.service << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "[Unit]",' >> lib/prepzo-bot-stack.ts
          echo '      "Description=Prepzo Bot Service",' >> lib/prepzo-bot-stack.ts
          echo '      "After=network.target",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "[Service]",' >> lib/prepzo-bot-stack.ts
          echo '      "User=ec2-user",' >> lib/prepzo-bot-stack.ts
          echo '      "WorkingDirectory=/home/ec2-user/prepzo_bot",' >> lib/prepzo-bot-stack.ts
          echo '      "EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env",' >> lib/prepzo-bot-stack.ts
          echo '      "ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python main.py start",' >> lib/prepzo-bot-stack.ts
          echo '      "Restart=always",' >> lib/prepzo-bot-stack.ts
          echo '      "RestartSec=10",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Configure port forwarding",' >> lib/prepzo-bot-stack.ts
          echo '      "# Forward port 80 to 8080 for the health check",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables-save > /etc/iptables.rules",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"net.ipv4.ip_forward=1\\" >> /etc/sysctl.conf",' >> lib/prepzo-bot-stack.ts
          echo '      "sysctl -p",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create a script to persist iptables rules after reboot",' >> lib/prepzo-bot-stack.ts
          echo '      "mkdir -p /etc/network/if-pre-up.d",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /etc/network/if-pre-up.d/iptables << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/sh",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables-restore < /etc/iptables.rules",' >> lib/prepzo-bot-stack.ts
          echo '      "exit 0",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "chmod +x /etc/network/if-pre-up.d/iptables",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create rc.local for Amazon Linux 2023 to ensure iptables persist",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /etc/rc.local << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/bash",' >> lib/prepzo-bot-stack.ts
          echo '      "# Load saved iptables rules",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables-restore < /etc/iptables.rules",' >> lib/prepzo-bot-stack.ts
          echo '      "# Ensure forwarding from port 80 to 8080",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080",' >> lib/prepzo-bot-stack.ts
          echo '      "exit 0",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "chmod +x /etc/rc.local",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create a simple diagnostics script",' >> lib/prepzo-bot-stack.ts
          echo '      "cat > /home/ec2-user/diagnose.sh << \\"EOF\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "#!/bin/bash",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"System status:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "uptime",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"\\nDisk space:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "df -h",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"\\nMemory usage:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "free -m",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"\\nService status:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl status prepzo-bot --no-pager",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl status health-check --no-pager",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"\\nNetworking:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "netstat -tulpn | grep -E \'(8080|80)\'",' >> lib/prepzo-bot-stack.ts
          echo '      "curl -s http://localhost:8080/health || echo \\"Health check failed\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "iptables -t nat -L -n -v",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"\\nLogs:\\"",' >> lib/prepzo-bot-stack.ts
          echo '      "journalctl -u prepzo-bot -n 20 --no-pager",' >> lib/prepzo-bot-stack.ts
          echo '      "EOF",' >> lib/prepzo-bot-stack.ts
          echo '      "chmod +x /home/ec2-user/diagnose.sh",' >> lib/prepzo-bot-stack.ts
          echo '      "chown ec2-user:ec2-user /home/ec2-user/diagnose.sh",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Enable and start services",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl daemon-reload",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl enable prepzo-bot",' >> lib/prepzo-bot-stack.ts
          echo '      "systemctl start prepzo-bot",' >> lib/prepzo-bot-stack.ts
          echo '      "",' >> lib/prepzo-bot-stack.ts
          echo '      "# Create a marker file to indicate setup is complete",' >> lib/prepzo-bot-stack.ts
          echo '      "touch /var/tmp/setup_complete",' >> lib/prepzo-bot-stack.ts
          echo '      "echo \\"Setup completed successfully at $(date)\\""' >> lib/prepzo-bot-stack.ts
          echo '    );' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // EC2 instance' >> lib/prepzo-bot-stack.ts
          echo '    const instance = new ec2.Instance(this, "PrepzoBotInstance", {' >> lib/prepzo-bot-stack.ts
          echo '      vpc,' >> lib/prepzo-bot-stack.ts
          echo '      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.SMALL),' >> lib/prepzo-bot-stack.ts
          echo '      machineImage: ec2.MachineImage.latestAmazonLinux2023(),' >> lib/prepzo-bot-stack.ts
          echo '      securityGroup,' >> lib/prepzo-bot-stack.ts
          echo '      role,' >> lib/prepzo-bot-stack.ts
          echo '      userData,' >> lib/prepzo-bot-stack.ts
          echo '      keyName: "${{ secrets.EC2_KEY_NAME }}",' >> lib/prepzo-bot-stack.ts
          echo '    });' >> lib/prepzo-bot-stack.ts
          echo '' >> lib/prepzo-bot-stack.ts
          echo '    // Output the instance public IP' >> lib/prepzo-bot-stack.ts
          echo '    new cdk.CfnOutput(this, "InstancePublicIP", {' >> lib/prepzo-bot-stack.ts
          echo '      value: instance.instancePublicIp,' >> lib/prepzo-bot-stack.ts
          echo '      description: "The public IP address of the Prepzo Bot instance",' >> lib/prepzo-bot-stack.ts
          echo '      exportName: "PrepzoBotInstanceIP",' >> lib/prepzo-bot-stack.ts
          echo '    });' >> lib/prepzo-bot-stack.ts
          echo '  }' >> lib/prepzo-bot-stack.ts
          echo '}' >> lib/prepzo-bot-stack.ts

          # Create the main entry point file
          echo '#!/usr/bin/env node' > bin/prepzo-bot.ts
          echo 'import "source-map-support/register";' >> bin/prepzo-bot.ts
          echo 'import * as cdk from "aws-cdk-lib";' >> bin/prepzo-bot.ts
          echo 'import { PrepzoBotStack } from "../lib/prepzo-bot-stack";' >> bin/prepzo-bot.ts
          echo '' >> bin/prepzo-bot.ts
          echo 'const app = new cdk.App();' >> bin/prepzo-bot.ts
          echo 'new PrepzoBotStack(app, "PrepzoBotStack", {' >> bin/prepzo-bot.ts
          echo '  env: {' >> bin/prepzo-bot.ts
          echo '    account: process.env.CDK_DEFAULT_ACCOUNT,' >> bin/prepzo-bot.ts
          echo '    region: process.env.CDK_DEFAULT_REGION' >> bin/prepzo-bot.ts
          echo '  },' >> bin/prepzo-bot.ts
          echo '});' >> bin/prepzo-bot.ts

          # Show the stack
          echo "Available stacks after creation:"
          npx cdk ls || echo "Failed to list stacks"
      
      - name: Check AWS credentials and permissions
        run: |
          echo "==== Checking AWS credentials ===="
          aws sts get-caller-identity
          
          echo "==== Checking AWS region ===="
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          
          echo "==== Checking IAM permissions ===="
          aws iam get-user || echo "Warning: Could not get IAM user"
          
          echo "==== Checking EC2 permissions ===="
          aws ec2 describe-regions --region ${{ secrets.AWS_REGION }} --query "Regions[0]" || echo "Warning: EC2 permission check failed"
          
          echo "==== Checking CloudFormation permissions ===="
          aws cloudformation list-stacks --region ${{ secrets.AWS_REGION }} --query "StackSummaries[0]" || echo "Warning: CloudFormation permission check failed"
      
      - name: Bootstrap CDK environment
        working-directory: ./infrastructure
        run: |
          # Try to bootstrap with force flag
          cdk bootstrap --force --verbose || {
            echo "Bootstrap failed, checking if CDKToolkit stack exists in failed state..."
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DOES_NOT_EXIST")
            
            if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$STACK_STATUS" = "CREATE_FAILED" ]; then
              echo "Deleting failed CDKToolkit stack..."
              aws cloudformation delete-stack --stack-name CDKToolkit
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name CDKToolkit
              
              echo "Stack deleted, checking if S3 bucket still exists..."
              S3_BUCKETS=$(aws s3 ls | grep cdk-hnb659fds-assets || echo "")
              if [ -n "$S3_BUCKETS" ]; then
                echo "Warning: S3 buckets still exist. You may need to delete them manually."
                echo "$S3_BUCKETS"
              fi
              
              echo "Retrying bootstrap..."
              cdk bootstrap --verbose
            else
              echo "CDKToolkit stack status: $STACK_STATUS"
              echo "Bootstrap failed and stack is not in a state that can be automatically fixed."
              exit 1
            fi
          }
      
      - name: Deploy CDK Stack
        id: get-ip
        working-directory: ./infrastructure
        run: |
          # Create a simple health check script for the EC2 instance
          mkdir -p user-data
          cat > user-data/health.sh << 'EOF'
          #!/bin/bash
          # Simple script to ensure port 80 always has a listener
          yum install -y socat
          nohup socat -v TCP-LISTEN:80,fork,reuseaddr,crlf 'SYSTEM:echo -e "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"status\":\"ok\"}"' > /var/log/health-socat.log 2>&1 &
          EOF
          
          # Add this to the stack user data
          sed -i '/const userData = ec2.UserData.forLinux();/a userData.addCommands("curl -sSL -o /root/health.sh https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/user-data/health.sh\\nchmod +x /root/health.sh\\n/root/health.sh");' lib/prepzo-bot-stack.ts
          
          # Modify security group to explicitly allow all traffic
          sed -i '/securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(8080)/a securityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.allTcp(), "Allow all TCP traffic");' lib/prepzo-bot-stack.ts
          
          # Debug CDK initialization
          echo "Created CDK project structure:"
          ls -la
          
          # Check default app.ts file
          echo "Default app.ts content:"
          cat lib/infrastructure-stack.ts || echo "File not found"
          
          # Check CDK bootstrap status
          echo "Checking CDK bootstrap status..."
          aws cloudformation describe-stacks --stack-name CDKToolkit --query 'Stacks[0].StackStatus' || echo "CDKToolkit stack not found"
          
          # List synthesized stacks
          echo "Running cdk ls to see what stacks will be deployed:"
          cdk ls
          
          # Deploy with verbose output
          echo "Deploying stack (this may take several minutes)..."
          cdk deploy --all --require-approval never --verbose
          
          # List all stacks after deployment
          echo "Listing all stacks after deployment:"
          aws cloudformation list-stacks --query 'StackSummaries[*].[StackName,StackStatus]'
          
          # Wait for outputs to be available
          echo "Waiting for stack outputs to be available..."
          sleep 10
          
          # List all available stacks
          echo "Available CloudFormation stacks:"
          aws cloudformation list-stacks --query 'StackSummaries[*].[StackName,StackStatus]'
          
          # Try to get instance IP from InfrastructureStack
          echo "Attempting to get instance IP from InfrastructureStack..."
          instance_ip=$(aws cloudformation describe-stacks \
            --stack-name InfrastructureStack \
            --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIP`].OutputValue' \
            --output text)
          
          if [ -z "$instance_ip" ]; then
            echo "Could not find InstancePublicIP in InfrastructureStack outputs"
            echo "Checking all stack outputs..."
            aws cloudformation describe-stacks --stack-name InfrastructureStack --query 'Stacks[0].Outputs'
            
            # Try PrepzoBotStack as fallback
            echo "Trying PrepzoBotStack as fallback..."
            instance_ip=$(aws cloudformation describe-stacks \
              --stack-name PrepzoBotStack \
              --query 'Stacks[0].Outputs[?OutputKey==`InstancePublicIP`].OutputValue' \
              --output text 2>/dev/null || echo "")
            
            if [ -z "$instance_ip" ]; then
              echo "Could not find instance IP in any stack"
              exit 1
            fi
          fi
          
          echo "Found instance IP: $instance_ip"
          echo "instance_ip=$instance_ip" >> $GITHUB_OUTPUT
          
          # Check recent CloudFormation events for any issues
          echo "Checking recent CloudFormation events..."
          aws cloudformation describe-stack-events \
            --stack-name InfrastructureStack \
            --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' || echo "No failed events found"
      
      - name: Install dependencies for verification
        run: pip install requests
      
      - name: Wait for deployment to complete
        run: |
          # First check if instance_ip is valid
          if [ -z "${{ steps.get-ip.outputs.instance_ip }}" ]; then
            echo "❌ No instance IP was retrieved, deployment failed."
            exit 1
          fi
          
          # Create SSH key file
          echo "Setting up SSH key for connecting to instance..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          
          # Wait for the instance to initialize and start the service (15 minutes max)
          INSTANCE_IP="${{ steps.get-ip.outputs.instance_ip }}"
          echo "Instance IP: $INSTANCE_IP"
          echo "Waiting for deployment to complete and service to start..."
          
          # First wait for SSH to be available (5 minutes max)
          echo "Waiting for SSH to become available..."
          SSH_MAX_RETRIES=30
          for i in $(seq 1 $SSH_MAX_RETRIES); do
            echo "SSH connection attempt $i of $SSH_MAX_RETRIES..."
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/ec2_key ec2-user@$INSTANCE_IP "echo SSH connection successful"; then
              echo "✅ SSH connection established!"
              break
            fi
            
            if [ $i -eq $SSH_MAX_RETRIES ]; then
              echo "⚠️ Could not establish SSH connection after 5 minutes."
              echo "Checking instance status via AWS CLI..."
              aws ec2 describe-instance-status --instance-ids $(aws ec2 describe-instances --filter Name=ip-address,Values=$INSTANCE_IP --query "Reservations[0].Instances[0].InstanceId" --output text)
              echo "Will try to continue with TCP health checks anyway..."
            fi
            
            # Try to ping and check basic network connectivity
            echo "Basic network connectivity test:"
            ping -c 3 $INSTANCE_IP || echo "Ping failed - this may be expected if ICMP is blocked"
            
            echo "Checking TCP port accessibility with telnet/nc..."
            timeout 5 nc -zv $INSTANCE_IP 80 || echo "Port 80 not accessible yet"
            timeout 5 nc -zv $INSTANCE_IP 22 || echo "Port 22 (SSH) not accessible yet"
            
            echo "Waiting for SSH to become available... (10 seconds)"
            sleep 10
          done
          
          # Now wait for health check to respond
          MAX_RETRIES=60
          RETRY_INTERVAL=15
          
          # Use curl with verbose output to better diagnose connection issues
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES to connect to health endpoint..."
            
            # Try both ports for the health check with verbose output to see where it's failing
            echo "Trying port 80..."
            timeout 10 curl -v http://$INSTANCE_IP/ || echo "Port 80 connection failed"
            
            HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://$INSTANCE_IP/ || echo "000error")
            
            if [ "$HTTP_RESPONSE" == "200" ]; then
              echo "✅ Health check endpoint is responding on port 80! Service is running."
              echo "Deployment successful."
              
              # Try to get actual health check content
              echo "Health check response content:"
              curl -s http://$INSTANCE_IP/ || echo "Could not get health check content"
              
              exit 0
            fi
            
            # If we reach the 10th attempt and still no success, try to get more diagnostics via SSH if possible
            if [ $((i % 5)) -eq 0 ] || [ $i -eq 10 ] || [ $i -eq 20 ]; then
              echo "======== DETAILED DIAGNOSTICS AT ATTEMPT $i ========"
              # Try to SSH in and check the status
              ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/ec2_key ec2-user@$INSTANCE_IP 'bash -s' << 'EOF' || echo "Could not connect via SSH for diagnostics"
              echo "==== BASIC SYSTEM STATUS ===="
              uptime
              hostname
              
              echo "==== NETWORK INTERFACE STATUS ===="
              ip addr
              ip route
              
              echo "==== FIREWALL/IPTABLES STATUS ===="
              sudo iptables -L -v
              sudo iptables -t nat -L -v
              
              echo "==== CHECKING LISTENER PROCESSES ===="
              ps aux | grep -E '[n]c|[s]ocat|[l]isten|[p]ort'
              sudo netstat -tulpn | grep -E ':(80|8080)'
              
              echo "==== CHECKING BOOT LOGS ===="
              sudo journalctl -b | tail -50
              
              echo "==== HEALTH CHECK FILES ===="
              ls -la /tmp/port80*
              cat /tmp/health-check.log 2>/dev/null || echo "No health check log found"
              
              echo "==== TRYING LOCAL CONNECTION ===="
              curl -v localhost:80 2>&1 || echo "Local connection to port 80 failed"
              
              echo "==== MANUAL HEALTH CHECK SETUP ===="
              # Ensure we have a basic listener on port 80
              if ! sudo netstat -tulpn | grep ':80'; then
                echo "No listener found on port 80. Setting up a basic one..."
                echo -e "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"status\":\"ok\"}" | sudo nc -l 80 &
                
                # If that fails, try with socat
                if [ $? -ne 0 ]; then
                  echo "nc failed, trying with socat..."
                  sudo yum install -y socat || true
                  # Simple version with less quotes
                  sudo bash -c 'socat TCP-LISTEN:80,fork,reuseaddr SYSTEM:"echo -e \"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\\\"status\\\":\\\"ok\\\"}\"" &'
                fi
              fi
EOF
            fi
            
            echo "Service not ready yet. HTTP response: $HTTP_RESPONSE"
            echo "Waiting $RETRY_INTERVAL seconds before next attempt..."
            sleep $RETRY_INTERVAL
          done
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment completed successfully!"
            echo "Instance IP: ${{ steps.get-ip.outputs.instance_ip }}"
            echo "Health check available at: http://${{ steps.get-ip.outputs.instance_ip }}/health"
            echo "SSH access: ssh ec2-user@${{ steps.get-ip.outputs.instance_ip }}"
            echo "Diagnostic command: sudo bash /home/ec2-user/diagnose.sh"
          else
            echo "❌ Deployment failed or verification timed out!"
            echo "If the instance was created, you can still check it manually:"
            echo "Instance IP: ${{ steps.get-ip.outputs.instance_ip }}"
            echo "Try connecting: ssh ec2-user@${{ steps.get-ip.outputs.instance_ip }}"
            echo "Then run: sudo bash /home/ec2-user/diagnose.sh"
          fi 