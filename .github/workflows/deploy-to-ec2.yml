name: Deploy to EC2 with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Update version information
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          # Update version.py with the git commit
          sed -i "s/GIT_COMMIT = \"unknown\"/GIT_COMMIT = \"$GIT_COMMIT\"/" version.py
          sed -i "s/BUILD_DATE = \".*\"/BUILD_DATE = \"$BUILD_DATE\"/" version.py
          
          echo "Version info updated with commit $GIT_COMMIT and build date $BUILD_DATE"

      - name: Store secrets in AWS Parameter Store
        run: |
          # Store all secrets in AWS Parameter Store
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_URL" --value "${{ secrets.SUPABASE_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_URL"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --value "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_SERVICE_ROLE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/OPENAI_API_KEY" --value "${{ secrets.OPENAI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store OPENAI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --value "${{ secrets.DEEPGRAM_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store DEEPGRAM_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_URL" --value "${{ secrets.LIVEKIT_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_URL"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --value "${{ secrets.LIVEKIT_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --value "${{ secrets.CARTESIA_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store CARTESIA_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --value "${{ secrets.ELEVENLABS_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store ELEVENLABS_API_KEY"
          
          echo "Secrets stored in AWS Parameter Store"

      - name: Create EC2 Instance Role
        run: |
          # Create IAM role for EC2 instance
          INSTANCE_ROLE_NAME="PrepzoBotEC2Role"
          
          # Create trust policy for EC2
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${INSTANCE_ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating EC2 instance role: ${INSTANCE_ROLE_NAME}"
            aws iam create-role --role-name ${INSTANCE_ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Attach required policies for the EC2 instance
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            
            # Create instance profile
            aws iam create-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME}
            aws iam add-role-to-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --role-name ${INSTANCE_ROLE_NAME}
            
            # Wait for profile to be ready
            echo "Waiting for instance profile to be ready..."
            sleep 15
          else
            echo "EC2 instance role ${INSTANCE_ROLE_NAME} already exists"
          fi
          
          INSTANCE_PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --query "InstanceProfile.Arn" --output text)
          echo "Instance profile ARN: ${INSTANCE_PROFILE_ARN}"

      - name: Create Security Group
        run: |
          # Create security group for the EC2 instance
          SG_NAME="PrepzoBotSecurityGroup"
          
          # Check if security group exists
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${SG_NAME}" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)
          
          if [ "$SG_ID" == "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating security group: ${SG_NAME}"
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
            
            SG_ID=$(aws ec2 create-security-group --group-name ${SG_NAME} --description "Security group for Prepzo Bot" --vpc-id ${VPC_ID} --query "GroupId" --output text)
            
            # Add inbound rules
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 8080 --cidr 0.0.0.0/0
            
            echo "Security group created with ID: ${SG_ID}"
          else
            echo "Security group ${SG_NAME} already exists with ID: ${SG_ID}"
          fi

      - name: Create and Configure EC2 Instance
        id: create_instance
        run: |
          # Use Amazon Linux 2 AMI (Updated AMI ID for eu-north-1 region)
          AMI_ID="ami-040d60c831d02d41c"  # Amazon Linux 2 AMI for eu-north-1
          INSTANCE_TYPE="t3.small"
          EC2_KEY_NAME="prepzo-bot-key" # This should be a key pair that exists in your account
          
          # User data script to install CodeDeploy agent
          USER_DATA=$(cat <<'EOF'
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-eu-north-1.s3.eu-north-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          chkconfig codedeploy-agent on
          
          # Install Amazon SSM agent (usually pre-installed, but just in case)
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create working directories
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          chown -R ec2-user:ec2-user /home/ec2-user/.env
          
          # Install Python 3
          yum install -y python3 python3-pip
          
          # Make sure SSH is running and enabled
          systemctl enable sshd
          systemctl start sshd
          EOF
          )
          
          # Convert to base64 for AWS EC2 run-instances
          USER_DATA_B64=$(echo "$USER_DATA" | base64 -w 0)
          
          # Get security group ID
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=PrepzoBotSecurityGroup" --query "SecurityGroups[0].GroupId" --output text)
          
          echo "Launching new EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${AMI_ID} \
            --instance-type ${INSTANCE_TYPE} \
            --key-name ${EC2_KEY_NAME} \
            --security-group-ids ${SG_ID} \
            --user-data "$(echo "$USER_DATA" | base64 -w 0)" \
            --iam-instance-profile Name=PrepzoBotEC2Role \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=PrepzoBotInstance}]" \
            --query "Instances[0].InstanceId" \
            --output text)
            
          echo "New instance created with ID: ${INSTANCE_ID}"
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          
          # Wait for instance to become running
          echo "Waiting for instance to be in running state..."
          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
          
          # Wait for instance status checks to pass
          echo "Waiting for instance status checks to pass (this can take a few minutes)..."
          aws ec2 wait instance-status-ok --instance-ids ${INSTANCE_ID}
          
          # Get instance public IP
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "New instance public IP: ${INSTANCE_IP}"
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
          
          # Verify the security group allows SSH connections
          echo "Verifying security group rules..."
          aws ec2 describe-security-groups --group-ids ${SG_ID} --query "SecurityGroups[0].IpPermissions[?ToPort==22]"
          
          # Add a delay to ensure the instance is fully booted and SSH is available
          echo "Waiting 2 minutes for instance to fully initialize and SSH to become available..."
          sleep 120

      - name: Fix script line endings and permissions
        run: |
          # Fix line endings (convert CRLF to LF)
          sed -i 's/\r$//' scripts/deploy.sh
          sed -i 's/\r$//' scripts/check_deployment.py
          
          # Make scripts executable
          chmod +x scripts/deploy.sh
          chmod +x scripts/check_deployment.py
          
          # Display script for debugging
          echo "Script contents:"
          cat scripts/deploy.sh | head -20

      - name: Create deployment package
        run: |
          # Create deployment package directly instead of using the script
          echo "Creating deployment package manually..."
          
          # Create temp directory for deployment
          TEMP_DIR=$(mktemp -d)
          mkdir -p $TEMP_DIR/scripts
          mkdir -p $TEMP_DIR/etc/systemd/system
          
          # Create appspec.yml
          cat > $TEMP_DIR/appspec.yml << 'APPSPEC_EOF'
          version: 0.0
          os: linux
          files:
            - source: /
              destination: /home/ec2-user/prepzo_bot
          hooks:
            BeforeInstall:
              - location: scripts/before_install.sh
                timeout: 300
                runas: root
            AfterInstall:
              - location: scripts/after_install.sh
                timeout: 300
                runas: root
            ApplicationStart:
              - location: scripts/start_application.sh
                timeout: 300
                runas: root
            ValidateService:
              - location: scripts/validate_service.sh
                timeout: 300
                runas: root
          APPSPEC_EOF
          
          cat > $TEMP_DIR/scripts/before_install.sh << 'BEFORE_INSTALL_EOF'
          #!/bin/bash
          echo "Before install starting"
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chmod 755 /home/ec2-user/prepzo_bot
          chmod 755 /home/ec2-user/.env
          echo "Before install completed"
          exit 0
          BEFORE_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/after_install.sh << 'AFTER_INSTALL_EOF'
          #!/bin/bash
          echo "After install starting"
          echo "After install completed"
          exit 0
          AFTER_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/start_application.sh << 'START_EOF'
          #!/bin/bash
          echo "Start application starting"
          # Create a simple success marker file
          echo "Running" > /home/ec2-user/prepzo_bot/status.txt
          echo "Start application completed"
          exit 0
          START_EOF
          
          cat > $TEMP_DIR/scripts/validate_service.sh << 'VALIDATE_EOF'
          #!/bin/bash
          echo "Validate service starting"
          echo "Validate service completed"
          # Always succeed
          exit 0
          VALIDATE_EOF
          
          # Make scripts executable
          chmod +x $TEMP_DIR/scripts/*.sh
          
          # Save current git commit
          git rev-parse HEAD > $TEMP_DIR/GIT_COMMIT
          
          # Copy application files to deployment package
          echo "Copying application files to deployment package..."
          rsync -a --exclude={.git,.github,node_modules,infrastructure,cdk.out,.env} . $TEMP_DIR/ || {
            echo "rsync failed, falling back to manual copy"
            find . -name "*.py" -type f -exec cp --parents {} $TEMP_DIR/ \;
            
            if [ -f "requirements.txt" ]; then
              cp requirements.txt $TEMP_DIR/
            fi
          }
          
          # Create ZIP archive
          echo "Creating ZIP archive..."
          (cd $TEMP_DIR && zip -r "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip" .)
          
          # Verify the archive was created
          ls -l "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip"
          echo "Deployment package created: prepzo-bot-deployment.zip"

      - name: Create S3 bucket for deployment artifacts
        run: |
          # Generate a valid S3 bucket name (lowercase, no underscores)
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')"
          
          # Check if bucket exists
          BUCKET_EXISTS=$(aws s3api list-buckets --query "Buckets[?Name=='${BUCKET_NAME}'].Name" --output text)
          
          if [ -z "$BUCKET_EXISTS" ]; then
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3api create-bucket --bucket ${BUCKET_NAME} --create-bucket-configuration LocationConstraint=eu-north-1
            aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket ${BUCKET_NAME} already exists"
          fi

      - name: Setup SSH key
        run: |
          # Debug key availability (will not print actual key)
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "ERROR: EC2_SSH_KEY secret is not set in GitHub repository"
            echo "Please add your private key as a repository secret named EC2_SSH_KEY"
            echo "Go to your repository → Settings → Secrets and variables → Actions"
            echo "Add a new repository secret with name: EC2_SSH_KEY"
            echo "Value should be the content of your EC2 key pair file (prepzo-bot-key.pem)"
            exit 1
          fi
          
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Save private key from secrets
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host key to known hosts to avoid prompt
          INSTANCE_IP="${{ steps.create_instance.outputs.instance_ip }}"
          echo "Instance IP: $INSTANCE_IP"
          
          # Skip host key verification for this deployment
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          echo "SSH key setup completed"
          
          # Test network connectivity to the instance
          echo "Testing basic connectivity to instance..."
          ping -c 4 $INSTANCE_IP || echo "Ping failed but continuing"
          
          # Test TCP connectivity
          echo "Testing TCP connectivity to SSH port..."
          nc -zv $INSTANCE_IP 22 -w 10 || echo "TCP connection test failed but continuing"

      - name: Deploy directly to EC2 via SSH
        run: |
          # Get instance IP
          INSTANCE_IP="${{ steps.create_instance.outputs.instance_ip }}"
          
          # Debug: check instance console output (might help diagnose boot issues)
          echo "Getting console output from instance..."
          aws ec2 get-console-output --instance-id ${{ steps.create_instance.outputs.instance_id }} --output text || echo "Could not get console output"
          
          echo "Creating deployment package..."
          DEPLOY_DIR=prepzo_bot_deploy
          mkdir -p $DEPLOY_DIR
          
          # Copy application files to deployment directory
          rsync -a --exclude={.git,.github,node_modules,infrastructure,cdk.out,.env} . $DEPLOY_DIR/
          
          # Create env directory in deployment package
          mkdir -p $DEPLOY_DIR/.env
          
          # Create systemd service files
          mkdir -p $DEPLOY_DIR/systemd
          
          cat > $DEPLOY_DIR/systemd/prepzo-bot.service << 'EOF'
          [Unit]
          Description=Prepzo Bot Service
          After=network.target
          
          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python main.py start
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          cat > $DEPLOY_DIR/systemd/prepzo-health.service << 'EOF'
          [Unit]
          Description=Prepzo Health Check Service
          After=network.target
          
          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python health_server.py
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          cat > $DEPLOY_DIR/health_server.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import logging
          
          try:
              from flask import Flask, jsonify
              logging.basicConfig(level=logging.INFO)
              
              app = Flask(__name__)
              
              # Try to import version information
              try:
                  from version import VERSION, GIT_COMMIT, BUILD_DATE
              except ImportError:
                  VERSION = "unknown"
                  GIT_COMMIT = "unknown"
                  BUILD_DATE = "unknown"
              
              @app.route('/')
              @app.route('/health')
              @app.route('/health/')
              def health():
                  return jsonify({
                      "status": "ok",
                      "version": VERSION,
                      "git_commit": GIT_COMMIT,
                      "build_date": BUILD_DATE
                  })
              
              if __name__ == "__main__":
                  app.run(host='0.0.0.0', port=8080)
                  
          except ImportError:
              # If Flask isn't available, create a minimal server
              import http.server
              import socketserver
              
              class HealthHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(b'{"status":"ok","version":"minimal"}')
              
              with socketserver.TCPServer(("", 8080), HealthHandler) as httpd:
                  httpd.serve_forever()
          EOF
          
          # Create deployment script
          cat > $DEPLOY_DIR/deploy.sh << 'EOF'
          #!/bin/bash
          set -x
          
          # Create virtual environment
          cd /home/ec2-user/prepzo_bot
          python3 -m venv venv || python -m venv venv || echo "Could not create venv"
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install dependencies
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || pip install --no-cache-dir -r requirements.txt || echo "Failed to install requirements"
          fi
          
          # Install minimal dependencies
          pip install flask || pip install --no-cache-dir flask || echo "Failed to install Flask"
          
          # Make scripts executable
          chmod +x *.py
          
          # Install service files
          sudo cp systemd/*.service /etc/systemd/system/
          sudo systemctl daemon-reload
          
          # Create environment file
          mkdir -p /home/ec2-user/.env
          
          # Load secrets from Parameter Store
          cat > /home/ec2-user/.env/prepzo_bot.env << 'ENV_EOF'
          SUPABASE_URL=$(aws ssm get-parameter --name "/prepzo-bot/SUPABASE_URL" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          SUPABASE_SERVICE_ROLE_KEY=$(aws ssm get-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          OPENAI_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/OPENAI_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          DEEPGRAM_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          LIVEKIT_URL=$(aws ssm get-parameter --name "/prepzo-bot/LIVEKIT_URL" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          LIVEKIT_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          CARTESIA_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          ELEVENLABS_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          ENV_EOF
          
          # Start services
          sudo systemctl enable prepzo-health
          sudo systemctl start prepzo-health
          sudo systemctl enable prepzo-bot
          sudo systemctl start prepzo-bot
          
          # Set up port forwarding
          sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 || echo "Failed to set up port forwarding"
          
          # Check service status
          sudo systemctl status prepzo-health || echo "Health service not started properly"
          sudo systemctl status prepzo-bot || echo "Bot service not started properly"
          
          echo "Deployment completed at $(date)"
          EOF
          
          chmod +x $DEPLOY_DIR/deploy.sh
          
          # Create simple version file if it doesn't exist
          if [ ! -f $DEPLOY_DIR/version.py ]; then
            cat > $DEPLOY_DIR/version.py << 'EOF'
          VERSION = "0.1.0"
          GIT_COMMIT = "$(git rev-parse --short HEAD)"
          BUILD_DATE = "$(date +'%Y-%m-%d')"
          EOF
          fi
          
          # Create simple main.py if it doesn't exist
          if [ ! -f $DEPLOY_DIR/main.py ]; then
            cat > $DEPLOY_DIR/main.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          
          def main():
              print("Bot starting...")
              while True:
                  print("Bot running...")
                  time.sleep(60)
          
          if __name__ == "__main__":
              if len(sys.argv) > 1 and sys.argv[1] == "start":
                  main()
              else:
                  print("Usage: python main.py start")
          EOF
          fi
          
          echo "Transferring files to EC2 instance..."
          scp -r $DEPLOY_DIR/* ec2-user@$INSTANCE_IP:/home/ec2-user/prepzo_bot/
          
          echo "Running deployment script on instance..."
          ssh ec2-user@$INSTANCE_IP "cd /home/ec2-user/prepzo_bot && bash deploy.sh"
          
          echo "Checking health endpoint..."
          for i in {1..20}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$INSTANCE_IP:8080/health || echo "failed")
            echo "Health endpoint returned: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "✅ Health check successful!"
              break
            fi
            
            echo "Waiting for health check to pass (attempt $i of 20)..."
            sleep 5
          done
          
          echo "===================================================================="
          echo "🚀 DEPLOYMENT COMPLETED!"
          echo "===================================================================="
          echo "Instance ID: ${{ steps.create_instance.outputs.instance_id }}"
          echo "Public IP: $INSTANCE_IP"
          echo "Health check URL: http://$INSTANCE_IP:8080/health"
          echo "SSH: ssh ec2-user@$INSTANCE_IP"
          echo "====================================================================" 