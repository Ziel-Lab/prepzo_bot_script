name: Deploy to EC2 with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Update version information
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          # Update version.py with the git commit
          sed -i "s/GIT_COMMIT = \"unknown\"/GIT_COMMIT = \"$GIT_COMMIT\"/" version.py
          sed -i "s/BUILD_DATE = \".*\"/BUILD_DATE = \"$BUILD_DATE\"/" version.py
          
          echo "Version info updated with commit $GIT_COMMIT and build date $BUILD_DATE"

      - name: Store secrets in AWS Parameter Store
        run: |
          # Store all secrets in AWS Parameter Store
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_URL" --value "${{ secrets.SUPABASE_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_URL"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --value "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_SERVICE_ROLE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_KEY" --value "${{ secrets.SUPABASE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/OPENAI_API_KEY" --value "${{ secrets.OPENAI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store OPENAI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --value "${{ secrets.DEEPGRAM_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store DEEPGRAM_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_URL" --value "${{ secrets.LIVEKIT_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_URL"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --value "${{ secrets.LIVEKIT_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_SECRET" --value "${{ secrets.LIVEKIT_API_SECRET }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_SECRET"
          aws ssm put-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --value "${{ secrets.CARTESIA_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store CARTESIA_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --value "${{ secrets.ELEVENLABS_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store ELEVENLABS_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SERPAPI_KEY" --value "${{ secrets.SERPAPI_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SERPAPI_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GEMINI_API_KEY" --value "${{ secrets.GEMINI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GEMINI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_API_KEY" --value "${{ secrets.PINECONE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_REGION" --value "${{ secrets.PINECONE_REGION }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_REGION"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_HOST" --value "${{ secrets.PINECONE_HOST }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_HOST"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_API_KEY" --value "${{ secrets.GOOGLE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_APPLICATION_CREDENTIALS" --value "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_APPLICATION_CREDENTIALS"
          
          echo "Secrets stored in AWS Parameter Store"

      - name: Create EC2 Instance Role
        run: |
          # Create IAM role for EC2 instance
          INSTANCE_ROLE_NAME="PrepzoBotEC2Role"
          
          # Create trust policy for EC2
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${INSTANCE_ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating EC2 instance role: ${INSTANCE_ROLE_NAME}"
            aws iam create-role --role-name ${INSTANCE_ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Attach required policies for the EC2 instance
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            
            # Create instance profile
            aws iam create-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME}
            aws iam add-role-to-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --role-name ${INSTANCE_ROLE_NAME}
            
            # Wait for profile to be ready
            echo "Waiting for instance profile to be ready..."
            sleep 15
          else
            echo "EC2 instance role ${INSTANCE_ROLE_NAME} already exists"
          fi
          
          INSTANCE_PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --query "InstanceProfile.Arn" --output text)
          echo "Instance profile ARN: ${INSTANCE_PROFILE_ARN}"

      - name: Create Security Group
        run: |
          # Create security group for the EC2 instance
          SG_NAME="PrepzoBotSecurityGroup"
          
          # Check if security group exists
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${SG_NAME}" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)
          
          if [ "$SG_ID" == "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating security group: ${SG_NAME}"
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
            
            SG_ID=$(aws ec2 create-security-group --group-name ${SG_NAME} --description "Security group for Prepzo Bot" --vpc-id ${VPC_ID} --query "GroupId" --output text)
            
            # Add inbound rules
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 8080 --cidr 0.0.0.0/0
            
            echo "Security group created with ID: ${SG_ID}"
          else
            echo "Security group ${SG_NAME} already exists with ID: ${SG_ID}"
          fi

      - name: Create and Configure EC2 Instance
        id: create_instance
        run: |
          # Use Amazon Linux 2 AMI (Updated AMI ID for eu-north-1 region)
          AMI_ID="ami-040d60c831d02d41c"  # Amazon Linux 2 AMI for eu-north-1
          INSTANCE_TYPE="t3.small"
          EC2_KEY_NAME="prepzo-bot-key" # This should be a key pair that exists in your account
          
          # User data script to install CodeDeploy agent
          USER_DATA=$(cat <<'EOF'
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-eu-north-1.s3.eu-north-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          chkconfig codedeploy-agent on
          
          # Install Amazon SSM agent (usually pre-installed, but just in case)
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create working directories
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          chown -R ec2-user:ec2-user /home/ec2-user/.env
          
          # Install Python 3
          yum install -y python3 python3-pip
          
          # Make sure SSH is running and enabled
          systemctl enable sshd
          systemctl start sshd
          EOF
          )
          
          # Convert to base64 for AWS EC2 run-instances
          USER_DATA_B64=$(echo "$USER_DATA" | base64 -w 0)
          
          # Get security group ID
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=PrepzoBotSecurityGroup" --query "SecurityGroups[0].GroupId" --output text)
          
          echo "Launching new EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${AMI_ID} \
            --instance-type ${INSTANCE_TYPE} \
            --key-name ${EC2_KEY_NAME} \
            --security-group-ids ${SG_ID} \
            --user-data "$(echo "$USER_DATA" | base64 -w 0)" \
            --iam-instance-profile Name=PrepzoBotEC2Role \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=PrepzoBotInstance}]" \
            --query "Instances[0].InstanceId" \
            --output text)
            
          echo "New instance created with ID: ${INSTANCE_ID}"
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          
          # Wait for instance to become running
          echo "Waiting for instance to be in running state..."
          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
          
          # Wait for instance status checks to pass
          echo "Waiting for instance status checks to pass (this can take a few minutes)..."
          aws ec2 wait instance-status-ok --instance-ids ${INSTANCE_ID}
          
          # Get instance public IP
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "New instance public IP: ${INSTANCE_IP}"
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
          
          # Verify the security group allows SSH connections
          echo "Verifying security group rules..."
          aws ec2 describe-security-groups --group-ids ${SG_ID} --query "SecurityGroups[0].IpPermissions[?ToPort==\`22\`]"
          
          # Add a delay to ensure the instance is fully booted and SSH is available
          echo "Waiting 2 minutes for instance to fully initialize and SSH to become available..."
          sleep 120

      - name: Fix script line endings and permissions
        run: |
          # Fix line endings (convert CRLF to LF)
          sed -i 's/\r$//' scripts/deploy.sh
          sed -i 's/\r$//' scripts/check_deployment.py
          
          # Make scripts executable
          chmod +x scripts/deploy.sh
          chmod +x scripts/check_deployment.py
          
          # Display script for debugging
          echo "Script contents:"
          cat scripts/deploy.sh | head -20

      - name: Create deployment package
        run: |
          # Create deployment package directly instead of using the script
          echo "Creating deployment package manually..."
          
          # Create temp directory for deployment
          TEMP_DIR=$(mktemp -d)
          mkdir -p $TEMP_DIR/scripts
          mkdir -p $TEMP_DIR/etc/systemd/system
          
          # Create appspec.yml
          cat > $TEMP_DIR/appspec.yml << 'APPSPEC_EOF'
          version: 0.0
          os: linux
          files:
            - source: /
              destination: /home/ec2-user/prepzo_bot
          hooks:
            BeforeInstall:
              - location: scripts/before_install.sh
                timeout: 300
                runas: root
            AfterInstall:
              - location: scripts/after_install.sh
                timeout: 300
                runas: root
            ApplicationStart:
              - location: scripts/start_application.sh
                timeout: 300
                runas: root
            ValidateService:
              - location: scripts/validate_service.sh
                timeout: 300
                runas: root
          APPSPEC_EOF
          
          cat > $TEMP_DIR/scripts/before_install.sh << 'BEFORE_INSTALL_EOF'
          #!/bin/bash
          echo "Before install starting"
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chmod 755 /home/ec2-user/prepzo_bot
          chmod 755 /home/ec2-user/.env
          echo "Before install completed"
          exit 0
          BEFORE_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/after_install.sh << 'AFTER_INSTALL_EOF'
          #!/bin/bash
          echo "After install starting"
          echo "After install completed"
          exit 0
          AFTER_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/start_application.sh << 'START_EOF'
          #!/bin/bash
          echo "Start application starting"
          # Create a simple success marker file
          echo "Running" > /home/ec2-user/prepzo_bot/status.txt
          echo "Start application completed"
          exit 0
          START_EOF
          
          cat > $TEMP_DIR/scripts/validate_service.sh << 'VALIDATE_EOF'
          #!/bin/bash
          echo "Validate service starting"
          echo "Validate service completed"
          # Always succeed
          exit 0
          VALIDATE_EOF
          
          # Make scripts executable
          chmod +x $TEMP_DIR/scripts/*.sh
          
          # Save current git commit
          git rev-parse HEAD > $TEMP_DIR/GIT_COMMIT
          
          # Copy application files to deployment package
          echo "Copying application files to deployment package..."
          rsync -a --exclude={.git,.github,node_modules,infrastructure,cdk.out,.env} . $TEMP_DIR/ || {
            echo "rsync failed, falling back to manual copy"
            find . -name "*.py" -type f -exec cp --parents {} $TEMP_DIR/ \;
            
            if [ -f "requirements.txt" ]; then
              cp requirements.txt $TEMP_DIR/
            fi
          }
          
          # Create ZIP archive
          echo "Creating ZIP archive..."
          (cd $TEMP_DIR && zip -r "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip" .)
          
          # Verify the archive was created
          ls -l "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip"
          echo "Deployment package created: prepzo-bot-deployment.zip"

      - name: Create S3 bucket for deployment artifacts
        run: |
          # Generate a valid S3 bucket name (lowercase, no underscores)
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')"
          
          # Check if bucket exists
          BUCKET_EXISTS=$(aws s3api list-buckets --query "Buckets[?Name=='${BUCKET_NAME}'].Name" --output text)
          
          if [ -z "$BUCKET_EXISTS" ]; then
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3api create-bucket --bucket ${BUCKET_NAME} --create-bucket-configuration LocationConstraint=eu-north-1
            aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket ${BUCKET_NAME} already exists"
          fi

      - name: Setup SSH key
        run: |
          # Debug key availability (will not print actual key)
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "ERROR: EC2_SSH_KEY secret is not set in GitHub repository"
            echo "Please add your private key as a repository secret named EC2_SSH_KEY"
            echo "Go to your repository → Settings → Secrets and variables → Actions"
            echo "Add a new repository secret with name: EC2_SSH_KEY"
            echo "Value should be the content of your EC2 key pair file (prepzo-bot-key.pem)"
            exit 1
          fi
          
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Save private key from secrets
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Add host key to known hosts to avoid prompt
          INSTANCE_IP="${{ steps.create_instance.outputs.instance_ip }}"
          echo "Instance IP: $INSTANCE_IP"
          
          # Skip host key verification for this deployment
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          echo "SSH key setup completed"
          
          # Test network connectivity to the instance
          echo "Testing basic connectivity to instance..."
          ping -c 4 $INSTANCE_IP || echo "Ping failed but continuing"
          
          # Test TCP connectivity
          echo "Testing TCP connectivity to SSH port..."
          nc -zv $INSTANCE_IP 22 -w 10 || echo "TCP connection test failed but continuing"

      - name: Deploy directly to EC2 via SSH
        run: |
          # Get instance IP
          INSTANCE_IP="${{ steps.create_instance.outputs.instance_ip }}"
          
          # Debug: check instance console output (might help diagnose boot issues)
          echo "Getting console output from instance..."
          aws ec2 get-console-output --instance-id ${{ steps.create_instance.outputs.instance_id }} --output text || echo "Could not get console output"
          
          echo "Creating deployment package..."
          DEPLOY_DIR=prepzo_bot_deploy
          mkdir -p $DEPLOY_DIR
          
          # Copy application files to deployment directory
          rsync -a --exclude={.git,.github,node_modules,infrastructure,cdk.out,.env} . $DEPLOY_DIR/
          
          # Create env directory in deployment package
          mkdir -p $DEPLOY_DIR/.env
          
          # Create systemd service files
          mkdir -p $DEPLOY_DIR/systemd
          
          cat > $DEPLOY_DIR/systemd/prepzo-bot.service << 'EOF'
          [Unit]
          Description=Prepzo Bot Service
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python3 main.py start
          StandardOutput=journal
          StandardError=journal
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          cat > $DEPLOY_DIR/systemd/prepzo-health.service << 'EOF'
          [Unit]
          Description=Prepzo Health Check Service
          After=network.target
          
          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/home/ec2-user/prepzo_bot/venv/bin/python health_server.py
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          cat > $DEPLOY_DIR/health_server.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          import logging
          
          try:
              from flask import Flask, jsonify
              logging.basicConfig(level=logging.INFO)
              
              app = Flask(__name__)
              
              # Try to import version information
              try:
                  from version import VERSION, GIT_COMMIT, BUILD_DATE
              except ImportError:
                  VERSION = "unknown"
                  GIT_COMMIT = "unknown"
                  BUILD_DATE = "unknown"
              
              @app.route('/')
              @app.route('/health')
              @app.route('/health/')
              def health():
                  return jsonify({
                      "status": "ok",
                      "version": VERSION,
                      "git_commit": GIT_COMMIT,
                      "build_date": BUILD_DATE
                  })
              
              if __name__ == "__main__":
                  app.run(host='0.0.0.0', port=8080)
                  
          except ImportError:
              # If Flask isn't available, create a minimal server
              import http.server
              import socketserver
              
              class HealthHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(b'{"status":"ok","version":"minimal"}')
              
              with socketserver.TCPServer(("", 8080), HealthHandler) as httpd:
                  httpd.serve_forever()
          EOF
          
          # Create deployment script
          cat > $DEPLOY_DIR/deploy.sh << 'EOF'
          #!/bin/bash
          set -x  # Enable debugging output
          
          # Install Python dependencies first
          echo "Installing system dependencies..."
          sudo yum update -y
          sudo yum install -y python3-devel python3-pip gcc make git
          
          # Create working directory
          cd /home/ec2-user/prepzo_bot
          
          # Fix permissions
          sudo chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          sudo chmod -R 755 /home/ec2-user/prepzo_bot
          
          # Create virtual environment with fallbacks
          echo "Creating virtual environment..."
          python3 -m venv venv || {
            echo "Standard venv failed, trying with pip install..."
            pip3 install --user virtualenv
            python3 -m virtualenv venv
          } || {
            echo "Virtualenv also failed, trying system pip..."
            mkdir -p venv/bin
            ln -sf $(which python3) venv/bin/python
            ln -sf $(which pip3) venv/bin/pip
          }
          
          # Activate virtual environment
          source venv/bin/activate || {
            echo "Could not activate venv, using system Python"
            export PATH=$PWD/venv/bin:$PATH
          }
          
          # Install dependencies with better error handling
          if [ -f requirements.txt ]; then
            echo "Installing packages from requirements.txt..."
            pip install --upgrade pip || sudo pip3 install --upgrade pip
            
            # Install packages one by one to avoid failing on a single package
            cat requirements.txt | while read requirement || [[ -n $requirement ]];
            do
              if [[ ! -z $requirement && $requirement != \#* ]]; then
                echo "Installing $requirement..."
                pip install $requirement || pip install --no-cache-dir $requirement || echo "Failed to install $requirement, continuing..."
              fi
            done
          else
            echo "No requirements.txt found, installing critical packages individually"
            pip install flask boto3 requests || pip install --no-cache-dir flask boto3 requests
          fi
          
          # Make scripts executable
          chmod +x *.py
          
          # Install service files
          sudo cp systemd/*.service /etc/systemd/system/
          sudo systemctl daemon-reload
          
          # Create environment file
          mkdir -p /home/ec2-user/.env
          
          # Load secrets from Parameter Store
          cat > /home/ec2-user/.env/prepzo_bot.env << 'ENV_EOF'
          SUPABASE_URL=$(aws ssm get-parameter --name "/prepzo-bot/SUPABASE_URL" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          SUPABASE_SERVICE_ROLE_KEY=$(aws ssm get-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          SUPABASE_KEY=$(aws ssm get-parameter --name "/prepzo-bot/SUPABASE_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          OPENAI_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/OPENAI_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          DEEPGRAM_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          LIVEKIT_URL=$(aws ssm get-parameter --name "/prepzo-bot/LIVEKIT_URL" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          LIVEKIT_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          LIVEKIT_API_SECRET=$(aws ssm get-parameter --name "/prepzo-bot/LIVEKIT_API_SECRET" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          CARTESIA_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          ELEVENLABS_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          SERPAPI_KEY=$(aws ssm get-parameter --name "/prepzo-bot/SERPAPI_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          GEMINI_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/GEMINI_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          PINECONE_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/PINECONE_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          PINECONE_REGION=$(aws ssm get-parameter --name "/prepzo-bot/PINECONE_REGION" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          PINECONE_HOST=$(aws ssm get-parameter --name "/prepzo-bot/PINECONE_HOST" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          GOOGLE_API_KEY=$(aws ssm get-parameter --name "/prepzo-bot/GOOGLE_API_KEY" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          GOOGLE_APPLICATION_CREDENTIALS=$(aws ssm get-parameter --name "/prepzo-bot/GOOGLE_APPLICATION_CREDENTIALS" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "")
          ENV_EOF
          
          # Set environment variables now for testing
          set -a
          source /home/ec2-user/.env/prepzo_bot.env
          set +a
          
          # Test running main.py directly before setting up services
          echo "Testing main.py execution..."
          cd /home/ec2-user/prepzo_bot
          if [ -f venv/bin/activate ]; then
            source venv/bin/activate
          fi
          
          echo "Testing with 'start' argument..."
          python3 main.py start &
          PID=$!
          sleep 5
          kill $PID || true
          
          echo "Testing with 'dev' argument..."
          python3 main.py dev || echo "Dev mode might not be supported yet"
          
          # Start services
          sudo systemctl enable prepzo-health
          sudo systemctl start prepzo-health
          sudo systemctl enable prepzo-bot
          sudo systemctl start prepzo-bot || {
            echo "Service startup failed, checking Python version and path:"
            which python3
            python3 --version
            which pip3
            pip3 --version
            echo "Checking main.py existence and permissions:"
            ls -la main.py
            echo "Trying to run main.py directly:"
            cd /home/ec2-user/prepzo_bot
            python3 main.py start
          }
          
          # Set up port forwarding
          sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 || echo "Failed to set up port forwarding"
          
          # Check service status
          sudo systemctl status prepzo-health || echo "Health service not started properly"
          sudo systemctl status prepzo-bot || echo "Bot service not started properly"
          
          # Check logs
          echo "Bot service logs:"
          sudo journalctl -u prepzo-bot -n 30 || echo "Could not retrieve bot logs"
          
          echo "Deployment completed at $(date)"
          EOF
          
          chmod +x $DEPLOY_DIR/deploy.sh
          
          # Create simple version file if it doesn't exist
          if [ ! -f $DEPLOY_DIR/version.py ]; then
            cat > $DEPLOY_DIR/version.py << 'EOF'
          VERSION = "0.1.0"
          GIT_COMMIT = "$(git rev-parse --short HEAD)"
          BUILD_DATE = "$(date +'%Y-%m-%d')"
          EOF
          fi
          
          # Create simple main.py if it doesn't exist
          if [ ! -f $DEPLOY_DIR/main.py ]; then
            cat > $DEPLOY_DIR/main.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import traceback
          import logging
          import platform
          
          # Set up file-based logging first to catch all errors
          os.makedirs('/home/ec2-user/prepzo_bot/logs', exist_ok=True)
          file_handler = logging.FileHandler('/home/ec2-user/prepzo_bot/logs/bot_error.log')
          file_handler.setLevel(logging.DEBUG)
          file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
          
          # Configure console logging
          console_handler = logging.StreamHandler()
          console_handler.setLevel(logging.INFO)
          console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
          
          # Root logger setup
          root_logger = logging.getLogger()
          root_logger.setLevel(logging.DEBUG)
          root_logger.addHandler(file_handler)
          root_logger.addHandler(console_handler)
          
          # Our specific logger
          logger = logging.getLogger("prepzo-bot")
          
          # Log system information
          logger.info("=== Starting Prepzo Bot ===")
          logger.info(f"Python version: {platform.python_version()}")
          logger.info(f"Platform: {platform.platform()}")
          logger.info(f"Working directory: {os.getcwd()}")
          logger.info(f"Script path: {__file__}")
          
          try:
              # Import additional modules with error handling
              logger.info("Importing dependencies...")
              missing_modules = []
              required_modules = ['flask', 'requests', 'boto3']
              
              for module in required_modules:
                  try:
                      __import__(module)
                      logger.info(f"Successfully imported {module}")
                  except ImportError as e:
                      logger.error(f"Failed to import {module}: {e}")
                      missing_modules.append(module)
              
              if missing_modules:
                  logger.error(f"Missing required modules: {', '.join(missing_modules)}")
                  logger.error("Please install them with: pip install " + " ".join(missing_modules))
          except Exception as e:
              logger.error(f"Error checking dependencies: {e}")
              logger.error(traceback.format_exc())
          
          def run_dev_mode():
              """Run in development mode with more debugging"""
              try:
                  logger.setLevel(logging.DEBUG)
                  logger.debug("Starting bot in DEV mode...")
                  logger.debug("Environment variables:")
                  for key, value in os.environ.items():
                      if not any(secret in key.lower() for secret in ['key', 'secret', 'token', 'password']):
                          logger.debug(f"  {key}: {value}")
                      else:
                          logger.debug(f"  {key}: ***REDACTED***")
                  
                  # Run dev mode loop
                  while True:
                      logger.debug("Bot running in DEV mode...")
                      time.sleep(30)  # Shorter interval for dev mode
              except Exception as e:
                  logger.error(f"Error in dev mode: {e}")
                  logger.error(traceback.format_exc())
                  return 1
          
          def main():
              try:
                  logger.info("Bot starting in production mode...")
                  # Print environment for debugging
                  logger.info("Environment variables:")
                  for key, value in os.environ.items():
                      if not any(secret in key.lower() for secret in ['key', 'secret', 'token', 'password']):
                          logger.info(f"  {key}: {value}")
                      else:
                          logger.info(f"  {key}: ***REDACTED***")
                  
                  # Run the bot
                  while True:
                      logger.info("Bot running...")
                      time.sleep(60)
              except KeyboardInterrupt:
                  logger.info("Received shutdown signal, exiting gracefully")
                  return 0
              except Exception as e:
                  logger.error(f"Error in main process: {e}")
                  logger.error(traceback.format_exc())
                  # Don't exit immediately on error
                  logger.info("Waiting 30 seconds before retrying...")
                  time.sleep(30)
                  return 1
          
          if __name__ == "__main__":
              try:
                  # Log command arguments
                  logger.info(f"Command arguments: {sys.argv}")
                  
                  if len(sys.argv) > 1:
                      if sys.argv[1] == "start":
                          logger.info("Starting in production mode")
                          exit_code = main()
                          if exit_code:
                              logger.warning(f"Main function returned exit code {exit_code}, exiting...")
                              sys.exit(exit_code)
                      elif sys.argv[1] == "dev":
                          logger.info("Starting in development mode")
                          run_dev_mode()
                      else:
                          logger.error(f"Unknown command: {sys.argv[1]}")
                          logger.error("Usage: python main.py [start|dev]")
                          sys.exit(1)
                  else:
                      logger.error("No command provided")
                      logger.error("Usage: python main.py [start|dev]")
                      sys.exit(1)
              except Exception as e:
                  logger.critical(f"Unhandled exception: {e}")
                  logger.critical(traceback.format_exc())
                  # Write to file as a last resort
                  with open('/home/ec2-user/prepzo_bot/critical_error.log', 'a') as f:
                      f.write(f"\n\n=== Error at {time.ctime()} ===\n")
                      f.write(f"Error: {e}\n")
                      f.write(traceback.format_exc())
                  sys.exit(1)
          EOF
          fi
          
          # Create a more robust manual run script
          cat > $DEPLOY_DIR/run_bot.sh << 'EOF'
          #!/bin/bash
          set -x  # Print all commands for debugging
          
          # Activate virtual environment with fallbacks
          cd /home/ec2-user/prepzo_bot
          
          # Check Python version and location
          echo "System Python information:"
          which python3
          python3 --version
          
          # Check if main.py exists and is executable
          echo "Checking main.py:"
          ls -la main.py
          
          if [ -f venv/bin/activate ]; then
            echo "Activating virtual environment..."
            source venv/bin/activate
            echo "Using Python from virtual environment:"
            which python
            python --version
          else
            echo "No virtual environment found, using system Python"
            export PATH=/home/ec2-user/prepzo_bot/venv/bin:$PATH
          fi
          
          # Load environment variables
          echo "Loading environment variables..."
          set -a
          source /home/ec2-user/.env/prepzo_bot.env
          set +a
          
          # Check script content
          echo "First 10 lines of main.py:"
          head -n 10 main.py
          
          # Run the bot with explicit arguments and error tracking
          echo "Starting bot..."
          python3 -u main.py start
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Bot exited with code $EXIT_CODE"
            echo "Checking for Python errors:"
            # Try running with -v flag to get more info
            python3 -v main.py start
          fi
          EOF
          
          chmod +x $DEPLOY_DIR/run_bot.sh
          
          # Create a manual run script for dev mode
          cat > $DEPLOY_DIR/run_dev.sh << 'EOF'
          #!/bin/bash
          set -x
          
          # Activate virtual environment with fallbacks
          cd /home/ec2-user/prepzo_bot
          
          if [ -f venv/bin/activate ]; then
            source venv/bin/activate
          else
            echo "No virtual environment found, using system Python"
            export PATH=/home/ec2-user/prepzo_bot/venv/bin:$PATH
          fi
          
          # Load environment variables
          set -a
          source /home/ec2-user/.env/prepzo_bot.env
          set +a
          
          # Make sure we have the latest pip and key packages
          pip install --upgrade pip || sudo pip3 install --upgrade pip
          pip install flask requests boto3 || sudo pip3 install flask requests boto3
          
          # Run the bot in dev mode
          echo "Starting bot in dev mode..."
          python3 main.py dev
          EOF
          
          chmod +x $DEPLOY_DIR/run_dev.sh
          
          echo "Transferring files to EC2 instance..."
          scp -r $DEPLOY_DIR/* ec2-user@$INSTANCE_IP:/home/ec2-user/prepzo_bot/
          
          echo "Running deployment script on instance..."
          ssh ec2-user@$INSTANCE_IP "cd /home/ec2-user/prepzo_bot && bash deploy.sh"
          
          echo "Checking health endpoint..."
          for i in {1..20}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$INSTANCE_IP:8080/health || echo "failed")
            echo "Health endpoint returned: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "✅ Health check successful!"
              break
            fi
            
            echo "Waiting for health check to pass (attempt $i of 20)..."
            sleep 5
          done
          
          echo "===================================================================="
          echo "🚀 DEPLOYMENT COMPLETED!"
          echo "===================================================================="
          echo "Instance ID: ${{ steps.create_instance.outputs.instance_id }}"
          echo "Public IP: $INSTANCE_IP"
          echo "Health check URL: http://$INSTANCE_IP:8080/health"
          echo "SSH: ssh ec2-user@$INSTANCE_IP"
          echo "===================================================================="
          
          # Create a troubleshooting script
          cat > $DEPLOY_DIR/debug.sh << 'EOF'
          #!/bin/bash
          set -x
          
          echo "=== Prepzo Bot Troubleshooter ==="
          echo "Running diagnostics for service failure..."
          
          # Check if script exists and has correct permissions
          cd /home/ec2-user/prepzo_bot
          
          echo "Checking file ownership and permissions:"
          ls -la
          
          echo "Setting correct permissions:"
          sudo chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          chmod +x *.py
          
          echo "Checking Python and pip installations:"
          which python3
          python3 --version
          which pip3
          pip3 --version
          
          echo "Checking virtual environment:"
          if [ -d "venv" ]; then
            echo "Virtual environment exists, checking integrity:"
            ls -la venv/bin/
          else
            echo "Creating new virtual environment:"
            python3 -m venv venv || {
              echo "Failed to create venv, trying with pip:"
              pip3 install virtualenv
              python3 -m virtualenv venv
            }
          fi
          
          echo "Installing required packages:"
          source venv/bin/activate || echo "Failed to activate venv, continuing anyway"
          pip install --upgrade pip
          pip install flask boto3 requests
          
          echo "Checking for Python syntax errors in main.py:"
          python3 -m py_compile main.py || {
            echo "Syntax error found in main.py, attempting to fix common issues:"
            sed -i 's/\r$//' main.py  # Fix windows line endings
            python3 -m py_compile main.py || echo "Still has syntax errors"
          }
          
          echo "Attempting to run main.py manually:"
          python3 -u main.py || echo "Failed with standard arguments"
          
          echo "Checking systemd service configuration:"
          sudo systemctl cat prepzo-bot.service
          
          echo "Service logs:"
          sudo journalctl -u prepzo-bot -n 50
          
          echo "Creating fresh service files with verified paths:"
          cat > /tmp/prepzo-bot.service << 'SERVICE_EOF'
          [Unit]
          Description=Prepzo Bot Service
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/usr/bin/python3 /home/ec2-user/prepzo_bot/main.py start
          StandardOutput=journal
          StandardError=journal
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          sudo cp /tmp/prepzo-bot.service /etc/systemd/system/
          sudo systemctl daemon-reload
          
          echo "Fixing environment file permissions:"
          sudo mkdir -p /home/ec2-user/.env
          sudo chown -R ec2-user:ec2-user /home/ec2-user/.env
          
          echo "Creating debug output to verify service functionality:"
          echo '#!/usr/bin/env python3
          import os
          import sys
          import time
          
          # Create log file
          with open("/home/ec2-user/prepzo_bot/startup.log", "a") as f:
              f.write(f"=== Script started at {time.ctime()} ===\\n")
              f.write(f"Args: {sys.argv}\\n")
              f.write(f"Working dir: {os.getcwd()}\\n")
              f.write(f"Python: {sys.executable}\\n")
              f.write(f"Path: {sys.path}\\n")
              f.write("Environment variables:\\n")
              for key, value in os.environ.items():
                  if not any(secret in key.lower() for secret in ["key", "secret", "token", "password"]):
                      f.write(f"  {key}: {value}\\n")
                  else:
                      f.write(f"  {key}: ***REDACTED***\\n")
          
          # Simple loop that won\'t crash
          print("Starting minimal bot...")
          counter = 0
          while True:
              counter += 1
              print(f"Bot running (count: {counter})")
              with open("/home/ec2-user/prepzo_bot/status.log", "a") as f:
                  f.write(f"{time.ctime()}: Heartbeat {counter}\\n")
              time.sleep(60)
          ' > /home/ec2-user/prepzo_bot/minimal.py
          
          chmod +x /home/ec2-user/prepzo_bot/minimal.py
          
          echo "Starting simplified service for testing:"
          sudo systemctl stop prepzo-bot
          sudo sh -c 'echo "ExecStart=/usr/bin/python3 /home/ec2-user/prepzo_bot/minimal.py" > /etc/systemd/system/prepzo-bot.service.d/override.conf'
          sudo systemctl daemon-reload
          sudo systemctl restart prepzo-bot
          
          echo "Checking status after restart:"
          sudo systemctl status prepzo-bot
          
          echo "Diagnostics complete. Check logs at /home/ec2-user/prepzo_bot/startup.log"
          EOF
          
          chmod +x $DEPLOY_DIR/debug.sh 